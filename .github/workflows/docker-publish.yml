name: Sync and Republish Docker Images

on:
  push:
    branches:
      - dev-registry
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  sync-hadoop:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull source image
        run: |
          echo "Pulling ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/hadoop:latest"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/hadoop:latest

      - name: Tag and push image
        run: |
          SOURCE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/hadoop:latest"
          TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/hadoop"
          
          # Tag con latest
          docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}:latest
          docker push ${TARGET_IMAGE}:latest
          
          # Tag con timestamp per versioning
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}:${TIMESTAMP}
          docker push ${TARGET_IMAGE}:${TIMESTAMP}
          
          echo "✅ Successfully pushed ${TARGET_IMAGE}:latest and ${TARGET_IMAGE}:${TIMESTAMP}"

      - name: Clean up local images
        if: always()
        run: |
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/hadoop:latest || true

  sync-spark:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull source image
        run: |
          echo "Pulling ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/spark-worker:latest"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/spark-worker:latest

      - name: Tag and push image
        run: |
          SOURCE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/spark-worker:latest"
          TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/spark-worker"
          
          # Tag con latest
          docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}:latest
          docker push ${TARGET_IMAGE}:latest
          
          # Tag con timestamp per versioning
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}:${TIMESTAMP}
          docker push ${TARGET_IMAGE}:${TIMESTAMP}
          
          echo "✅ Successfully pushed ${TARGET_IMAGE}:latest and ${TARGET_IMAGE}:${TIMESTAMP}"

      - name: Clean up local images
        if: always()
        run: |
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/spark-worker:latest || true