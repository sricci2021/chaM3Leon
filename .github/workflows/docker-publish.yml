name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['dev-registry']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  HADOOP_IMAGE_NAME: ${{ github.repository_owner }}/hadoop
  SPARK_IMAGE_NAME: ${{ github.repository_owner }}/spark-worker

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  sync-images:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
    # A matrix strategy is used to run the same steps for multiple images.
    # The `image` variable is defined for each job in the matrix, and is used in the `images` parameter of the `docker/metadata-action` step.
    # For more information, see [Matrix builds](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs).
    strategy:
      matrix:
        image:
          - name: hadoop
            source: ${{ env.REGISTRY }}/${{ env.HADOOP_IMAGE_NAME}}:latest
          - name: spark-worker
            source: ${{ env.REGISTRY }}/${{ env.SPARK_IMAGE_NAME }}:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull source image
        run: |
          echo "Pulling ${{ matrix.image.source }}"
          docker pull ${{ matrix.image.source }}

      - name: Tag and push image
        run: |
          SOURCE_IMAGE="${{ matrix.image.source }}"
          TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.image.name }}"
          
          # Tag con latest
          docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}:latest
          docker push ${TARGET_IMAGE}:latest
          
          # Tag con timestamp per versioning
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}:${TIMESTAMP}
          docker push ${TARGET_IMAGE}:${TIMESTAMP}
          
          echo "âœ… Successfully pushed ${TARGET_IMAGE}:latest and ${TARGET_IMAGE}:${TIMESTAMP}"

      - name: Clean up local images
        if: always()
        run: |
          docker rmi ${{ matrix.image.source }} || true
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.image.name }}:latest || true
          